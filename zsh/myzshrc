#!/usr/bin/zsh
# prompt
#
local cyan=$'\e[36m' reset=$'\e[m'
PROMPT="%{${cyan}%}%1d%# %{${reset}%}"

#
# shortcut
#
# Delete all existing keymaps and reset to the default state.
bindkey -d
# Selects keymap `emacs'.
bindkey -e

#
# compinit
#
autoload -Uz compinit && compinit

#
# helper
#
SCRIPT_DIR=$(cd "$(dirname "${0:-$BASH_SOURCE[0]}")" &>/dev/null && pwd -P)
source $SCRIPT_DIR/modules/helper/init.sh

#
# Welcome Message
#
my_log `uname -a`

# Beep off on error in ZLE
setopt no_beep

# Editor
if type "vim" > /dev/null 2>&1; then
  export EDITOR="vim"
fi

#
# the number of commands that are stored in the zsh history file
#
export SAVEHIST=5000000

#
# Share command history across all zsh sessions in real time.
# Useful when working with multiple terminal windows or tabs.
# Ensures history is immediately written to and read from the history file.
#
setopt share_history

#
# Ignore history duplicates
# Do not enter command lines into the history list if they are duplicates of the
# previous event.
#
setopt hist_ignore_dups

#
# When searching for history entries in the line editor, do not display duplicates
# of a line previously found, even if the duplicates are not contiguous.
#
setopt hist_find_no_dups

# Inform gpg-agent of the current TTY for user prompts.
# If you want to check gpg, type:
#   echo 'test' | gpg --clearsign
#
# BUT, Unable to List GPG Keys in Dev Container or Sign Git Commits
# https://github.com/microsoft/vscode-remote-release/issues/8549
export GPG_TTY=$TTY

# reverse-i-search with fzf
function select-history() {
  BUFFER=$(history -n -r 1 | fzf --no-sort +m --query "$LBUFFER" --prompt="History > ")
  CURSOR=$#BUFFER
}
zle -N select-history
bindkey '^r' select-history

# fgitshow - git commit browser
fgitshow() {
  git log --graph --color=always \
      --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
  fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
      --bind "ctrl-m:execute:
                (grep -o '[a-f0-9]\{7\}' | head -1 |
                xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                {}
FZF-EOF"
}

# fcd - cd to selected directory
fcd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf +m) &&
  cd "$dir"
}

#
# fdshell - Login to Docker with shell
#   usage: fdshell /bin/bash
#
fdshell() {
  local cid
  cid=$(docker ps | sed 1d | fzf | awk '{print $1}')
  [ -n "$cid" ] && docker exec -it "$cid" $1
}

#
# fdstop - Stop a running container
#   usage: fdstop
#
fdstop() {
  local cid
  cid=$(docker ps | sed 1d | fzf | awk '{print $1}')
  [ -n "$cid" ] && docker stop "$cid"
}

#
# fdvscode - Attach to a running container with VS Code
#   usage: fdvscode
#   https://github.com/microsoft/vscode-remote-release/issues/5278#issuecomment-1625401636
fdvscode() {
  local cid
  cid=$(docker ps | sed 1d | fzf | awk '{print $NF}')
  [ -n "$cid" ] && code --folder-uri vscode-remote://attached-container+$(printf "$cid" | od -A n -t x1 | sed 's/ *//g' | tr -d '\n')/app
}

#
# fghbrowse - Open the selected GitHub repository from the list in the browser.
#   usage: fghbrowse
#
fghbrowse() {
  local repo
  repo=$(gh repo list -L 1000 | fzf | awk '{print $1}')
  [ -n "$repo" ] && gh browse -R $repo
}

#
# frg - Search files with ripgrep (or grep), select with fzf, and open in the editor
#   usage: frg
#
frg() {
  grep_cmd="grep --recursive --line-number --invert-match --regexp '^\s*$' * 2>/dev/null"

  if type "rg" >/dev/null 2>&1; then
      grep_cmd="rg --hidden --no-ignore --line-number --no-heading --invert-match '^\s*$' 2>/dev/null"
  fi

  read -r file line <<<"$(eval $grep_cmd | fzf --select-1 --exit-0 | awk -F: '{print $1, $2}')"
  ( [[ -z "$file" ]] || [[ -z "$line" ]] ) && exit
  $EDITOR $file +$line
}

#
# Mac
#
if is-darwin; then
  #
  # brew
  #
  if [ -e /opt/homebrew/bin/brew ]; then
    eval $(/opt/homebrew/bin/brew shellenv)
  fi

  #
  # zsh-completions
  #
  # You may also need to force rebuild `zcompdump`:
  #
  #   rm -f ~/.zcompdump; compinit
  #
  # Additionally, if you receive "zsh compinit: insecure directories" warnings when attempting
  # to load these completions, you may need to run these commands:
  #
  #   chmod go-w '/opt/homebrew/share'
  #   chmod -R go-w '/opt/homebrew/share/zsh'
  #
  if type brew &>/dev/null; then
    FPATH=$(brew --prefix)/share/zsh-completions:$FPATH

    autoload -Uz compinit
    compinit
  fi

  #
  # zsh-autosuggestions
  #
  # If you press `Ctrl + e` or the `â†’` key (forward-char widget) or End (end-of-line widget) with the cursor at the end of the buffer,
  # it will accept the suggestion, replacing the contents of the command line buffer with the suggestion.
  #
  if type brew &>/dev/null; then
    [[ -d $(brew --prefix)/share/zsh-autosuggestions ]] && \
      source $(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh
  fi

  #
  # Visual Studio Code
  #
  # To run VS Code from the terminal by typing `code`, add it the $PATH environment variable:
  #
  code_path=/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin
  if [ -d $etc ]; then
    export PATH=$code_path:${PATH}
  fi

  #
  # Docker
  #
  etc=/Applications/Docker.app/Contents/Resources/etc
  target=~/dotfiles/zsh/completion
  if [ -d $etc ]; then
    ln -fs $etc/docker.zsh-completion $target/_docker
    ln -fs $etc/docker-compose.zsh-completion $target/_docker-compose
    fpath=($target $fpath)
    zstyle ':completion:*:*:docker:*' option-stacking yes
    zstyle ':completion:*:*:docker-*:*' option-stacking yes
    autoload -Uz compinit && compinit -i
  fi

  #
  # Docker CLI Plugins
  #
  plugins=$HOME/.docker/cli-plugins
  if [ -d $plugins ]; then
    export PATH=$plugins:${PATH}
  fi

  #
  # PostgreSQL(psql)
  #
  if type brew &>/dev/null; then
    libpq=$(brew --prefix)/opt/libpq/bin
    if [ -d $libpq ]; then
      export PATH=$libpq:${PATH}
    fi
  fi

  #
  # Alias
  #
  alias bell='afplay /System/Library/Sounds/Frog.aiff'
fi

#
# rbenv
#
[[ -d $HOME/.rbenv ]] && \
  export PATH=${HOME}/.rbenv/bin:${PATH} && \
  eval "$(rbenv init - zsh)"

#
# nodenv
#
[[ -d $HOME/.nodenv ]] && \
  eval "$(nodenv init - zsh)"
# https://github.com/uraitakahito/features/blob/8291744831e2c42b6c01fe169e98cca2a4b7fbc9/src/node/install.sh#L13
if { [ -d $HOME/.nodenv ] } || { [ -d /usr/local/share/nvm ] }; then
  export PATH=$PATH:./node_modules/.bin
fi

#
# uv
# https://zenn.dev/tadayosi/articles/522efbda48fbf4
#
if type uv &>/dev/null; then
  eval "$(uv generate-shell-completion zsh)"

  _uv_run_mod() {
      if [[ "$words[2]" == "run" && "$words[CURRENT]" != -* ]]; then
          _arguments '*:filename:_files'
      else
          _uv "$@"
      fi
  }
  compdef _uv_run_mod uv
fi

#
# Go
# https://github.com/devcontainers/features/tree/main/src/go
#
[[ -d /usr/local/go/bin ]] && \
  export PATH=/usr/local/go/bin:${PATH}
[[ -d /go/bin ]] && \
  export PATH=/go/bin:${PATH}
# https://go.dev/wiki/GOPATH
export PATH=$HOME/go/bin:${PATH}

#
# zoxide
# https://github.com/ajeetdsouza/zoxide
#
if type zoxide > /dev/null 2>&1; then
  export _ZO_DATA_DIR=${XDG_DATA_HOME-$HOME/.zoxide/data}
  eval "$(zoxide init zsh)"
fi

#
# Aliases
#
alias a='eza --icons'
alias ll='eza -l -g --icons'
alias d='docker'
if ! is-darwin; then
  # https://github.com/sharkdp/bat/issues/982
  alias bat='batcat --style=plain'
fi

#
# Git aliases
#
alias c='git commit -v'
alias g='git'
alias s='git status'

# trash-cli
# https://github.com/andreafrancia/trash-cli
if type trash-put > /dev/null 2>&1; then
  alias rm='trash-put'
fi
